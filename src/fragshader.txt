var fragmentShaderSource = `
            precision mediump float;
            uniform mediump vec3 lightPos;
            uniform mediump vec4 lightColor;
            varying highp vec4 col; 
            varying highp vec3 VMv;
            varying highp vec3 VMn; 
            void main(void) 
            { 
                vec3 N = normalize(VMn);
                float  d = length(lightPos - VMv);
                float specular; 
                mediump vec3 lightVec = normalize(lightPos - VMv);
                float diffuse = max(dot(N, lightVec), 0.1);
                diffuse = diffuse * (1.0 / (1.0 + (0.25 * d * d)));
                if (diffuse > 0.0) {
                        vec3 R = reflect(-lightVec, N); 
                        vec3 V = normalize(-VMv);
                        float specAngle = max(dot(R, V), 0.0);
                        specular = pow(specAngle, 80.0);
                }
                gl_FragColor = col*diffuse + lightColor*specular;
            }`;